#!/bin/bash

# //////////////////////////////////////////////////////////////////////// #
# Application Name	: eiossavrets
# Version						: v.1.0.0
# Author 						: endang.ismaya@gmail.com
# Date 							: July 19, 2016
# Update						: -
# Location 					: San Francisco, USA
# Comment						:	Retrieve Alarm, Vswr, RSSI, Rets
# //////////////////////////////////////////////////////////////////////// #

# //////////////////////////////////////////////////////////////////////// #
# [REVISION-HISTORY]
# v.1.0.0
#  * July 19, 2016 Beta Version
#
# //////////////////////////////////////////////////////////////////////// #

##: -------------------------------------------------##
##: INITIALIZATION OF VARIABLES
##: -------------------------------------------------##
progname=${0##*/}
author="Endang.Ismaya(endang.ismaya@gmail.com)"
creationdate="July 16, 2016"
updatedate="-"
description="Retrieve Alarm, Vswr, RSSI, Rets"
comment="Don't panic! please report if You find a bug."
version=1.0.0
FOLCURRENT=`pwd` 
options=":f:a:cvh"

##: -------------------------------------------------##
##: FUNCTION DEFINITION
##: -------------------------------------------------##
## Usage Function to send the information how to use the tool
usage()
{        
printf '\n\e[1;35m%s: %s\e[0m\n\n' "Usage" "${progname} [-f sitelist]"
printf '\e[1;34m%s: %s\e[0m\n' "-f" "sitelist (Mandatory)"
printf '\e[1;34m%s: %s\e[0m\n' "-a" "additional foldername (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-c" "copy datainput to working folder instead of moving (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-h" "show this help message"
printf '\e[1;34m%s: %s\e[0m\n' "-v" "show this tool version"
printf '\e[1;34m%s %s\e[0m\n' "e.g." ""
printf '      \e[1;35m%s\e[0m\n\n' "$progname -f sitelist"
printf '      \e[1;35m%s\e[0m\n\n' "$progname -f sitelist -a Precheck"
printf '      \e[1;35m%s\e[0m\n\n' "$progname -f sitelist -a Precheck -c"
printf '      \e[1;35m%s\e[0m\n\n' "$progname -cf sitelist -a Precheck"
printf '      \e[1;35m%s\e[0m\n\n' "$progname -f sitelist -ac Precheck"
}

## Version Function
showversion()
{
## drawline2 "Version : ${version}"
printf '\e[1;33m%s version %s\e[0m\n\n' "$progname" "$version"
printf '\e[1;34mby %s, %s\e[0m\n' "$author" "${updatedate}"
printf '\e[1;34m%s\n%s\e[0m\n' "$description" "${comment}"
}

## error catch
error ()
{
	## echo "Error: $1"
	printf '\e[1;31m%s\e[0m\n\n' "Error: $1"
	usage
	exit $2
} >&2

## drawline function
drawline ()
{

dt=`date '+%m/%d/%Y %H:%M:%S'`
	
	len="${#1} + 26"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
	
	printf '| \e[1;32m%s : %s\e[0m |\n' "$1" "$dt"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

## drawline function
drawline2 ()
{
dt="->"
	len="${#1} + 4"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
	
	printf '| \e[1;33m%s\e[0m |\n' "$1"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

##: -------------------------------------------------##
##: RUN TIME CONFIGURATION AND OPTIONS
##: -------------------------------------------------##
##// checking if no argument (filename)
[[ $# -lt 1 ]] && { printf '\e[1;31m%s\e[0m\n\n' "Missing an argument." >&2; usage ; exit 1; }

while getopts $options opt; do
	case $opt in
		f)FILEOPT="${OPTARG}" ;;
		c)FILECOPY="YES" ;;
		a)FILEADD="${OPTARG}" ;;
		h)usage;exit 0;;
		v)showversion;exit 0;;
		:)error "Option -${OPTARG} is missing an argument" 2;;
		\?)error "Unknown option: -${OPTARG}" 3 ;;
 	esac
done   
shift $((OPTIND -1))

## variable declaration

## Folder & Files variable declaration
## current folder
## data file, provided by user
FILEDATA=${FILEOPT}
##----------------------------------------------------------

if [[ ! $FILEDATA ]]; then
	printf '!!! \e[1;31m%s\e[0m !!!\n' "need a filename to proceed" >&2
	usage
	drawline "Terminated "
	exit 1
else
	if [[ ! -e $FILEDATA ]]; then
	 	printf '!!! \e[1;31m%s\e[0m !!!\n' "File ${FILEDATA} is not exists" >&2
	 	drawline "Terminated "
	 	exit 1
	fi
fi

dt=`date '+%m%d%Y_%H%M%S'`
if [[ ! $FILEADD ]]; then
	fol="LTESTATUS_${dt}"
else
	fol="${FILEADD}_LTESTATUSPLUS${dt}"
fi

## Copying or moving filedata
mkdir "${fol}"
if [[ $FILECOPY ]]; then
	cp "${FILEDATA}" "${fol}/${FILEDATA}"
else
	mv "${FILEDATA}" "${fol}/${FILEDATA}"
fi
cd ${fol}

## processing sign
drawline "Start "
##-----------------

## Pre-StatusPlus
/home/ei400b/00_Tools/ltestatusplus/eiossltestatusplus -f "${FILEDATA}" -a PreAvrets -c

## Mobatch Unlocking
drawline2 "Unlocking Cells"
cmdunlocking="/home/ei400b/00_Tools/lte.avrets/cmdunlocking"
nohup /opt/ericsson/amos/moshell/mobatch -p 5 -t 120 ${FILEDATA} ${cmdunlocking} mb_unlocking

## wait for 15m
drawline2 "Waiting 30m"
sleep 30m

## Mobatch retreiving values
drawline2 "Collecting alarms, vswr, rssi, rets"
cmdavrets="/home/ei400b/00_Tools/lte.avrets/cmdavrets"
nohup /opt/ericsson/amos/moshell/mobatch -p 5 -t 120 ${FILEDATA} ${cmdavrets} mb_avrets

## Mobatch Locking Cells
drawline2 "Locking Cells"
cmdlocking="/home/ei400b/00_Tools/lte.avrets/cmdlocking"
nohup /opt/ericsson/amos/moshell/mobatch -p 5 -t 120 ${FILEDATA} ${cmdlocking} mb_locking

## egrep
cd mb_avrets
egrep 'm.*C' mobatch_result.txt | nawk '{gsub("no contact","no_contact");print $3";"$1";"$2}' > conn.txt
egrep 'Nr of active alarms are:' *.log | nawk '{gsub(".log:Nr of active alarms are:","");print}' > ala.txt
egrep ';' *.log | nawk '{gsub(".log:",";");print}' | cut -d';' -f1,2,3,4,5,6,8 | egrep -v 'Date;Time' > aladetails.txt
egrep '000100BXP' *.log | nawk '{gsub(".log:"," ");print}' > vswr.txt
egrep 'Int_RadioRecInterference|Counter' *.log | egrep -v '/var/opt/ericsson/amos/moshell_logfiles/|evaluating|pmrk|;' | nawk '{gsub(".log:"," ");print}' > rssi.txt

cd ..
wait 1m
/home/ei400b/00_Tools/ltestatusplus/eiossltestatusplus -f "${FILEDATA}" -a PostAvrets -c

## processing sign
drawline "Finish "
##-----------------
                                 
exit 0
